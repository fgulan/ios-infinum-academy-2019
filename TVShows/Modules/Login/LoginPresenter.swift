//
//  LoginPresenter.swift
//  TVShows
//
//  Created by Filip Gulan on 29/07/2018.
//  Copyright (c) 2018 Filip Gulan. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import RxSwift
import RxCocoa

final class LoginPresenter {

    // MARK: - Private properties -
    
    private unowned let _view: LoginViewInterface
    private let _interactor: LoginInteractorInterface
    private let _wireframe: LoginWireframeInterface

    // MARK: - Lifecycle -

    init(view: LoginViewInterface, interactor: LoginInteractorInterface, wireframe: LoginWireframeInterface) {
        _view = view
        _interactor = interactor
        _wireframe = wireframe
    }
}

// MARK: - Extensions -

extension LoginPresenter: LoginPresenterInterface {

    func setupBinding(with output: Login.ViewOutput) -> Login.ViewInput {
        let loginModel = Driver
            .combineLatest(output.email, output.password, output.rememberMe)
            .map(Login.Model.init)
        
        let hasEmailAndPassword = loginModel
            .map { !$0.email.isEmpty && !$0.password.isEmpty }
        
        output
            .loginPressed
            .withLatestFrom(loginModel)
            .pipe(to: loginWith(loginModel:))
        
        output
            .registerPressed
            .withLatestFrom(loginModel)
            .pipe(to: _registerWith(loginModel:))
        
        return Login.ViewInput(loginEnabled: hasEmailAndPassword,
                               registerEnabled: hasEmailAndPassword)
    }
}

private extension LoginPresenter {
    
    func _registerWith(loginModel: Driver<Login.Model>) {
        loginModel
            .flatMapLatest { [unowned _interactor, unowned _wireframe] model -> Driver<Login.Model> in
                return _interactor
                    .registerWith(email: model.email, password: model.password)
                    .handleLoadingAndError(with: _wireframe)
                    .asDriverOnErrorComplete()
                    .mapTo(model)
            }
            .pipe(to: loginWith(loginModel:))
    }
    
    func loginWith(loginModel: Driver<Login.Model>) {
        loginModel
            .flatMapLatest { [unowned _interactor, unowned _wireframe] model -> Driver<Void> in
                return _interactor
                    .loginWith(email: model.email, password: model.password)
                    .handleLoadingAndError(with: _wireframe)
                    .asDriverOnErrorComplete()
            }
            .mapTo(Login.NavigationOption.home)
            .pipe(to: handle(navigation:))
    }
    
    func handle(navigation: Driver<Login.NavigationOption>) {
        navigation.pipe(to: _wireframe.navigate(using: ))
    }
}

