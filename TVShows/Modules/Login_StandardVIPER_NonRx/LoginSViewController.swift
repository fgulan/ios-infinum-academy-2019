//
//  LoginSViewController.swift
//  TVShows
//
//  Created by Filip Gulan on 29/07/2018.
//  Copyright (c) 2018 Filip Gulan. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class LoginSViewController: UIViewController {

    // MARK: - Private properties -
    
    // MARK: - IBOutlets
    
    @IBOutlet private weak var _scrollView: UIScrollView!
    
    @IBOutlet private weak var _loginButton: UIButton!
    @IBOutlet private weak var _registerButton: UIButton!
    @IBOutlet private weak var _checkmarkButton: UIButton!
    
    @IBOutlet private weak var _emailField: UITextField!
    @IBOutlet private weak var _passwordField: UITextField!
    
    // MARK: - Public properties -

    var presenter: LoginSPresenterInterface!
    
    // MARK: - Public methods -

    // MARK: - Lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        _setupUI()
        _setupKeyboardObservers()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.setNavigationBarHidden(true, animated: animated)
    }
    
    // MARK: - Private methods -

    // MARK: - UI Setup
    
    private func _setupUI() {
        _loginButton.layer.cornerRadius = 6.0
        _loginButton.setBackgroundImage(.from(color: UIColor.TVShows.pink), for: .normal)
        _loginButton.setBackgroundImage(.from(color: UIColor.TVShows.pink.withAlphaComponent(0.5)),
                                        for: .disabled)
    }
}

// MARK: - Extensions -

extension LoginSViewController: LoginSViewInterface {
}

// MARK: - IBActions

private extension LoginSViewController {
    
    @IBAction func _checkmarkButtonActionHandler() {
        _checkmarkButton.isSelected = !_checkmarkButton.isSelected
    }
    
    @IBAction private func _loginButtonActionHandler() {
        guard
            let email = _emailField.text,
            let password = _passwordField.text,
            !email.isEmpty, !password.isEmpty
        else {
            return
        }
        view.endEditing(true)
        presenter.didSelectLoginWith(email: email, password: password)
    }
    
    @IBAction private func _registerButtonActionHandler() {
        guard
            let email = _emailField.text,
            let password = _passwordField.text,
            !email.isEmpty, !password.isEmpty
        else {
            return
        }
        view.endEditing(true)
        presenter.didSelectRegisterWith(email: email, password: password)
    }
}

// MARK: UITextFieldDelegate

extension LoginSViewController: UITextFieldDelegate {

    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        view.endEditing(true)
        return true
    }
}

// MARK: - Keyboard handling

private extension LoginSViewController {
    
    private func _setupKeyboardObservers() {
        NotificationCenter.default.addObserver(self,
                                               selector: #selector(_keyboardWillShow(_:)),
                                               name: UIResponder.keyboardWillShowNotification,
                                               object: nil)
        NotificationCenter.default.addObserver(self,
                                               selector: #selector(_keyboardWillHide(_:)),
                                               name: UIResponder.keyboardWillHideNotification,
                                               object: nil)
    }

    @objc func _keyboardWillShow(_ notification: Notification) {
        guard
            let userInfo = notification.userInfo,
            let keyboardSize = (userInfo[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue
        else { return }
        _scrollView.contentInset.bottom = keyboardSize.size.height
    }

    @objc func _keyboardWillHide(_ notification: Notification) {
        _scrollView.contentInset = .zero
    }
}
