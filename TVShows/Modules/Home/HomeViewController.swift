//
//  HomeViewController.swift
//  TVShows
//
//  Created by Filip Gulan on 29/07/2018.
//  Copyright (c) 2018 Filip Gulan. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RxSwift
import RxCocoa

final class HomeViewController: UIViewController {

    // MARK: - Private properties -
    
    private let _disposeBag = DisposeBag()
    
    private lazy var _dataSourceDelegate: CollectionDataSourceDelegate = {
        return CollectionDataSourceDelegate(collectionView: _collectionView)
    }()
    
    lazy var refreshControl: UIRefreshControl = {
        let refreshControl = UIRefreshControl()
        _collectionView.refreshControl = refreshControl
        
        return refreshControl
    }()
    
    // MARK: - IBOutlets
    
    @IBOutlet private weak var _collectionView: UICollectionView!

    // MARK: - Public properties -

    var presenter: HomePresenterInterface!

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        setupUI()
        _collectionView.collectionViewLayout.invalidateLayout()
        _collectionView.setCollectionViewLayout(ShowsGridFlowLayout(), animated: false)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.setNavigationBarHidden(false, animated: true)
        _collectionView.refreshControl?.endRefreshing()
    }
}

// MARK: - Extensions -

extension HomeViewController: HomeViewInterface {
}

private extension HomeViewController {

    func setupView() {
        let logoutButton = UIBarButtonItem(image: #imageLiteral(resourceName: "ic-logout"))
        navigationItem.leftBarButtonItem = logoutButton
                
        let refresh = refreshControl.rx
            .controlEvent(.valueChanged)
            .asDriver()

        let output = Home.ViewOutput(refresh: refresh,
                                     logoutPressed: logoutButton.rx.tap.asDriver())
        let input = presenter.setup(with: output)
        
        input.items
            .drive(_dataSourceDelegate.rx.items)
            .disposed(by: _disposeBag)
        
        input.items
            .mapTo(false)
            .drive(refreshControl.rx.isRefreshing)
            .disposed(by: _disposeBag)
    }
    
    func setupUI() {
        title = "Shows"
    }
}
